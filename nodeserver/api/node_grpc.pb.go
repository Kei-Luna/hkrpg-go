// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.0
// - protoc             v5.26.0
// source: node.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeDiscovery_Test_FullMethodName               = "/proto.NodeDiscovery/Test"
	NodeDiscovery_RegisterServer_FullMethodName     = "/proto.NodeDiscovery/RegisterServer"
	NodeDiscovery_CloseServer_FullMethodName        = "/proto.NodeDiscovery/CloseServer"
	NodeDiscovery_KeepaliveServer_FullMethodName    = "/proto.NodeDiscovery/KeepaliveServer"
	NodeDiscovery_NodeStreamMessages_FullMethodName = "/proto.NodeDiscovery/NodeStreamMessages"
	NodeDiscovery_GetAllGateServerMq_FullMethodName = "/proto.NodeDiscovery/GetAllGateServerMq"
	NodeDiscovery_GetAllRegionInfo_FullMethodName   = "/proto.NodeDiscovery/GetAllRegionInfo"
	NodeDiscovery_GetRegionAllGame_FullMethodName   = "/proto.NodeDiscovery/GetRegionAllGame"
)

// NodeDiscoveryClient is the client API for NodeDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 节点服务器注册发现服务
type NodeDiscoveryClient interface {
	// 测试
	Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestRsp, error)
	// 向node注册服务
	RegisterServer(ctx context.Context, in *RegisterServerReq, opts ...grpc.CallOption) (*RegisterServerRsp, error)
	// 离线取消注册
	CloseServer(ctx context.Context, in *CloseServerReq, opts ...grpc.CallOption) (*CloseServerRsp, error)
	// 服务器在线心跳保持
	KeepaliveServer(ctx context.Context, in *KeepaliveServerReq, opts ...grpc.CallOption) (*KeepaliveServerRsp, error)
	// 持续接收来自node的消息
	NodeStreamMessages(ctx context.Context, in *NodeStreamMessagesReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeStreamMessagesRsp], error)
	// 获取全部gate mq
	GetAllGateServerMq(ctx context.Context, in *GetAllGateServerMqReq, opts ...grpc.CallOption) (*GetAllGateServerMqRsp, error)
	// 获取全部区服信息
	GetAllRegionInfo(ctx context.Context, in *GetAllRegionInfoReq, opts ...grpc.CallOption) (*GetAllRegionInfoRsp, error)
	// 获取该区服下的所有已注册的GS信息
	GetRegionAllGame(ctx context.Context, in *GetRegionAllGameReq, opts ...grpc.CallOption) (*GetRegionAllGameRsp, error)
}

type nodeDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeDiscoveryClient(cc grpc.ClientConnInterface) NodeDiscoveryClient {
	return &nodeDiscoveryClient{cc}
}

func (c *nodeDiscoveryClient) Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestRsp)
	err := c.cc.Invoke(ctx, NodeDiscovery_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryClient) RegisterServer(ctx context.Context, in *RegisterServerReq, opts ...grpc.CallOption) (*RegisterServerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterServerRsp)
	err := c.cc.Invoke(ctx, NodeDiscovery_RegisterServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryClient) CloseServer(ctx context.Context, in *CloseServerReq, opts ...grpc.CallOption) (*CloseServerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseServerRsp)
	err := c.cc.Invoke(ctx, NodeDiscovery_CloseServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryClient) KeepaliveServer(ctx context.Context, in *KeepaliveServerReq, opts ...grpc.CallOption) (*KeepaliveServerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeepaliveServerRsp)
	err := c.cc.Invoke(ctx, NodeDiscovery_KeepaliveServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryClient) NodeStreamMessages(ctx context.Context, in *NodeStreamMessagesReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeStreamMessagesRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeDiscovery_ServiceDesc.Streams[0], NodeDiscovery_NodeStreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeStreamMessagesReq, NodeStreamMessagesRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeDiscovery_NodeStreamMessagesClient = grpc.ServerStreamingClient[NodeStreamMessagesRsp]

func (c *nodeDiscoveryClient) GetAllGateServerMq(ctx context.Context, in *GetAllGateServerMqReq, opts ...grpc.CallOption) (*GetAllGateServerMqRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGateServerMqRsp)
	err := c.cc.Invoke(ctx, NodeDiscovery_GetAllGateServerMq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryClient) GetAllRegionInfo(ctx context.Context, in *GetAllRegionInfoReq, opts ...grpc.CallOption) (*GetAllRegionInfoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRegionInfoRsp)
	err := c.cc.Invoke(ctx, NodeDiscovery_GetAllRegionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryClient) GetRegionAllGame(ctx context.Context, in *GetRegionAllGameReq, opts ...grpc.CallOption) (*GetRegionAllGameRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionAllGameRsp)
	err := c.cc.Invoke(ctx, NodeDiscovery_GetRegionAllGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeDiscoveryServer is the server API for NodeDiscovery service.
// All implementations must embed UnimplementedNodeDiscoveryServer
// for forward compatibility.
//
// 节点服务器注册发现服务
type NodeDiscoveryServer interface {
	// 测试
	Test(context.Context, *TestReq) (*TestRsp, error)
	// 向node注册服务
	RegisterServer(context.Context, *RegisterServerReq) (*RegisterServerRsp, error)
	// 离线取消注册
	CloseServer(context.Context, *CloseServerReq) (*CloseServerRsp, error)
	// 服务器在线心跳保持
	KeepaliveServer(context.Context, *KeepaliveServerReq) (*KeepaliveServerRsp, error)
	// 持续接收来自node的消息
	NodeStreamMessages(*NodeStreamMessagesReq, grpc.ServerStreamingServer[NodeStreamMessagesRsp]) error
	// 获取全部gate mq
	GetAllGateServerMq(context.Context, *GetAllGateServerMqReq) (*GetAllGateServerMqRsp, error)
	// 获取全部区服信息
	GetAllRegionInfo(context.Context, *GetAllRegionInfoReq) (*GetAllRegionInfoRsp, error)
	// 获取该区服下的所有已注册的GS信息
	GetRegionAllGame(context.Context, *GetRegionAllGameReq) (*GetRegionAllGameRsp, error)
	mustEmbedUnimplementedNodeDiscoveryServer()
}

// UnimplementedNodeDiscoveryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeDiscoveryServer struct{}

func (UnimplementedNodeDiscoveryServer) Test(context.Context, *TestReq) (*TestRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedNodeDiscoveryServer) RegisterServer(context.Context, *RegisterServerReq) (*RegisterServerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedNodeDiscoveryServer) CloseServer(context.Context, *CloseServerReq) (*CloseServerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseServer not implemented")
}
func (UnimplementedNodeDiscoveryServer) KeepaliveServer(context.Context, *KeepaliveServerReq) (*KeepaliveServerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepaliveServer not implemented")
}
func (UnimplementedNodeDiscoveryServer) NodeStreamMessages(*NodeStreamMessagesReq, grpc.ServerStreamingServer[NodeStreamMessagesRsp]) error {
	return status.Errorf(codes.Unimplemented, "method NodeStreamMessages not implemented")
}
func (UnimplementedNodeDiscoveryServer) GetAllGateServerMq(context.Context, *GetAllGateServerMqReq) (*GetAllGateServerMqRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGateServerMq not implemented")
}
func (UnimplementedNodeDiscoveryServer) GetAllRegionInfo(context.Context, *GetAllRegionInfoReq) (*GetAllRegionInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRegionInfo not implemented")
}
func (UnimplementedNodeDiscoveryServer) GetRegionAllGame(context.Context, *GetRegionAllGameReq) (*GetRegionAllGameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionAllGame not implemented")
}
func (UnimplementedNodeDiscoveryServer) mustEmbedUnimplementedNodeDiscoveryServer() {}
func (UnimplementedNodeDiscoveryServer) testEmbeddedByValue()                       {}

// UnsafeNodeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeDiscoveryServer will
// result in compilation errors.
type UnsafeNodeDiscoveryServer interface {
	mustEmbedUnimplementedNodeDiscoveryServer()
}

func RegisterNodeDiscoveryServer(s grpc.ServiceRegistrar, srv NodeDiscoveryServer) {
	// If the following call pancis, it indicates UnimplementedNodeDiscoveryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeDiscovery_ServiceDesc, srv)
}

func _NodeDiscovery_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeDiscovery_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServer).Test(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscovery_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeDiscovery_RegisterServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServer).RegisterServer(ctx, req.(*RegisterServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscovery_CloseServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServer).CloseServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeDiscovery_CloseServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServer).CloseServer(ctx, req.(*CloseServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscovery_KeepaliveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepaliveServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServer).KeepaliveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeDiscovery_KeepaliveServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServer).KeepaliveServer(ctx, req.(*KeepaliveServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscovery_NodeStreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeStreamMessagesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeDiscoveryServer).NodeStreamMessages(m, &grpc.GenericServerStream[NodeStreamMessagesReq, NodeStreamMessagesRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeDiscovery_NodeStreamMessagesServer = grpc.ServerStreamingServer[NodeStreamMessagesRsp]

func _NodeDiscovery_GetAllGateServerMq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGateServerMqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServer).GetAllGateServerMq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeDiscovery_GetAllGateServerMq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServer).GetAllGateServerMq(ctx, req.(*GetAllGateServerMqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscovery_GetAllRegionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRegionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServer).GetAllRegionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeDiscovery_GetAllRegionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServer).GetAllRegionInfo(ctx, req.(*GetAllRegionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscovery_GetRegionAllGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionAllGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServer).GetRegionAllGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeDiscovery_GetRegionAllGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServer).GetRegionAllGame(ctx, req.(*GetRegionAllGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeDiscovery_ServiceDesc is the grpc.ServiceDesc for NodeDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeDiscovery",
	HandlerType: (*NodeDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _NodeDiscovery_Test_Handler,
		},
		{
			MethodName: "RegisterServer",
			Handler:    _NodeDiscovery_RegisterServer_Handler,
		},
		{
			MethodName: "CloseServer",
			Handler:    _NodeDiscovery_CloseServer_Handler,
		},
		{
			MethodName: "KeepaliveServer",
			Handler:    _NodeDiscovery_KeepaliveServer_Handler,
		},
		{
			MethodName: "GetAllGateServerMq",
			Handler:    _NodeDiscovery_GetAllGateServerMq_Handler,
		},
		{
			MethodName: "GetAllRegionInfo",
			Handler:    _NodeDiscovery_GetAllRegionInfo_Handler,
		},
		{
			MethodName: "GetRegionAllGame",
			Handler:    _NodeDiscovery_GetRegionAllGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeStreamMessages",
			Handler:       _NodeDiscovery_NodeStreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}
